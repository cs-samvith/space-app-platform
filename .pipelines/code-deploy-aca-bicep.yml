trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - /apps/single/src/*  
      - /.pipelines/code-deploy-aca-bicep.yml

pr: none

pool:
  vmImage: ubuntu-latest

variables:
  imageRepository: "single"
  containerRegistry: spacedevacr.azurecr.io
  tag: "$(Build.BuildNumber)-aca"
  service_connection: ARM_SERVICE_CONNECTION
  containerAppName_east: space-platform-app-east
  resource_group: space-dev-platform
  modttag: $[replace(variables['Build.BuildNumber'], '.', '-')]

stages:
  - stage: BuildAndDeploy
    jobs:
      - job: Build
        steps:
          - task: CmdLine@2
            displayName: List and View
            inputs:
                script: |
                    echo "Structure of work folder of this pipeline:"
                    tree -a $(Build.SourcesDirectory)

          - task: Docker@2
            name: docker_build_and_push
            displayName: docker build and push
            inputs:
              containerRegistry: $(containerRegistry)
              repository: $(imageRepository)
              command: "buildAndPush"
              Dockerfile: "apps/single/src/Dockerfile"
              tags: |
                latest
                $(tag)

      - job: Deploy
        dependsOn:
          - Build
        steps:

          # - task: AzureCLI@2
          #   displayName: "Azure CLI Get Static IP"
          #   name: GetStaticValue
          #   inputs:
          #     azureSubscription: $(service_connection)
          #     scriptType: bash
          #     scriptLocation: inlineScript
          #     inlineScript: |
          #       az --version
          #       az account show
          #       rgname=$(az aks show --resource-group $(aks_rg) --name $(aks_cluster_name) --query nodeResourceGroup -o tsv)
          #       echo $rgname | jq .
          #       echo "##vso[task.setvariable variable=nodepoolrg;isoutput=true]$rgname"
          #       staticip=$(az network public-ip create --resource-group $rgname --name myAKSPublicIPForIngress --sku Standard --allocation-method static --query publicIp.ipAddress -o tsv)
          #       echo "##vso[task.setvariable variable=ingressStaticIp;isoutput=true]$staticip"

          - task: CmdLine@2
            inputs:
              script: |
                pwd 
                echo "$(tag)"
                modtag=$(echo $tag | sed -e 's/\./-/g')
                echo "$(modtag)"
                sed -i 's/PLACEHOLDER/$(modttag)-aca/g' .infrastructure/parameters/dev/container-apps.json
              workingDirectory: $(Build.SourcesDirectory)
              #failOnStderr: false # boolean. Fail on Standard Error. Default: false.
        
          # - task: CmdLine@2
            # inputs:
            #   script: |
            #     pwd 
            #     cat .infrastructure/parameters/dev/container-apps.json
            #   workingDirectory: $(Build.SourcesDirectory)
            #   #failOnStderr: false # boolean. Fail on Standard Error. Default: false.

          - template: "templates/bicep_create.yml"
            parameters:
              deployment_name: 'provision-container-app-deployment'
              service_connection: ${{variables.service_connection}}
              display_name: 'container-app-deployment'
              resource_group: $(resource_group)
              template: .infrastructure/modules/cotnainer-apps.bicep
              environment: 'dev'

          # - task: AzureContainerApps@1
          #   inputs:
          #     imageToDeploy: "$(containerRegistry)/$(imageRepository):$(tag)"
          #     azureSubscription: ${{variables.service_connection}}
          #     containerAppName: $(containerAppName_east)
          #     resourceGroup: $(resource_group)
          #     acrUsername: $(acrusername)
          #     acrPassword: $(acrpassword)
          #     targetPort: 5000

          # - task: AzureContainerApps@1
          #   inputs:
          #     imageToDeploy: "$(containerRegistry)/$(imageRepository):$(tag)"
          #     azureSubscription: ${{variables.service_connection}}
          #     containerAppName: $(containerAppName_west)
          #     resourceGroup: $(resource_group)
          #     acrUsername: $(acrusername)
          #     acrPassword: $(acrpassword)
          #     targetPort: 5000

  # imageToDeploy: '$(containerRegistry)/$(imageRepository):latest'
  #  imageToDeploy: '$(containerRegistry)/$(imageRepository):$(Build.BuildId)'
  #TODO  - Try removing the Deploy Stage and see if the image pushed is automatically pulled by Web app ..
  # step 1 - makes some UI text change
  # step 2 - remove deploy stage
